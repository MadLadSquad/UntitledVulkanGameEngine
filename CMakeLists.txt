cmake_minimum_required(VERSION 3.17)
project(Game)
set(CMAKE_CXX_STANDARD 17)
add_subdirectory(Engine/ThirdParty/glm/)
add_subdirectory(Engine/ThirdParty/glfw/)
if(MINGW)
else()
     add_subdirectory(Engine/ThirdParty/openal/)
endif()
add_subdirectory(Engine/ThirdParty/yaml/)
add_subdirectory(Engine/ThirdParty/entt/)
link_directories(Engine/ThirdParty/glew/lib)
include_directories(.)
include_directories(Engine/)
include_directories(Engine/ThirdParty/entt/src/entt)
include_directories(Engine/Core/)
include_directories(Engine/ThirdParty/glm)
include_directories(Engine/ThirdParty/)
include_directories(Engine/ThirdParty/glew/include)
include_directories(Engine/ThirdParty/yaml/include)
include_directories(Engine/ThirdParty/yaml/include/yaml-cpp)
include_directories(Engine/ThirdParty/logger/)
file(GLOB_RECURSE GameSrc "Source/*.cpp" "Source/*.hpp" "Engine/Audio/*.cpp" "Engine/Audio/*.hpp" "Engine/Core/*.cpp" "Engine/Core/*.hpp" "Engine/Renderer/*.hpp" "Engine/Renderer/*.cpp" "Engine/GameFramework/*.cpp" "Engine/GameFramework/*.hpp")
add_executable(Game ${GameSrc} Engine/ThirdParty/logger/UVKLog.h main.cpp)
set_target_properties(Game PROPERTIES LINKER_LANGUAGE CXX)
if (WIN32)
     if (MINGW)
        target_link_libraries(Game pthread glfw opengl32 glew32 yaml-cpp)
     else()
         target_link_libraries(Game pthread glfw OpenAL opengl32 glew32 yaml-cpp)
     endif()
else()
     target_link_libraries(Game glfw OpenGL GLEW OpenAL yaml-cpp)
endif ()
